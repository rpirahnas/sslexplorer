<?xml version="1.0" encoding="UTF-8"?>
<project name="sslexplorer" default="console">

	<property file="build.properties"/>
	<property file="local.build.properties"/>

	<!-- Options for running ssl explorer -->
	<property name="sslexplorer.conf" value="conf"/>

	<!-- Location of tools.jar (Java compiler) -->
	<property name="tools.jar" value="lib/tools.jar"/>

	<!-- Standard build locations -->

	<property name="build.compiler" value="modern"/>
	<property name="build.dir" value="build"/>
	<property name="build.lib" value="lib"/>
	<property name="build.serverlib" value="serverlib"/>
	<property name="build.doc" value="${build.dir}/doc"/>
	<property name="build.webapp.lib" value="webapp/WEB-INF/lib"/>
	<property name="build.boot.output" value="${build.dir}/boot"/>
	<property name="build.jsp.output" value="${build.dir}/jsp"/>
	<property name="build.jsp.classes.output" value="${build.dir}/jspclasses"/>
	<property name="build.jsp.mappings.output" value="${build.dir}/gen"/>
	<property name="build.jsp.mappings.file" value="${build.jsp.mappings.output}/mappings.xml"/>
	<property name="build.tools.output" value="${build.dir}/tools"/>
	<property name="build.server.output" value="${build.dir}/server"/>
	<property name="build.webapp.output" value="${build.dir}/webapp"/>
	<property name="build.output.instrumented" value="${build.dir}/instrumented"/>
	<property name="build.output.test" value="${build.dir}/test" />
	<property name="build.webapp.deploy" value="webapp/WEB-INF/classes"/>
	<property name="build.boot.src" value="boot/src"/>
	<property name="build.server.src" value="server/src"/>
	<property name="build.webapp.src" value="src"/>
	<property name="build.test.src" value="test/src"/>
	<property name="build.tools.home" value="tools"/>
	<property name="build.test" value="test" />
	<property name="build.debug" value="on"/>
	<property name="build.reports" value="${build.dir}/reports"/>

	<!-- Reports -->
	<!-- build.reports is overridden when running the suite of tests -->
	<property name="build.reports" value="${basedir}/${build.dir}/reports"/>
	<property name="build.reports.junit" value="junit"/>
	<property name="build.reports.junit.xml" value="${build.reports.junit}/xml"/>
	<property name="build.reports.junit.html" value="${build.reports.junit}/html"/>
	<property name="build.reports.emma" value="emma"/>
	<property name="build.reports.emma.coverage" value="${build.reports.emma}/coverage"/>
	<property name="build.reports.emma.html" value="${build.reports.emma}/html"/>
	<property name="build.reports.findbugs" value="findbugs"/>
	<property name="build.reports.findbugs.xml" value="${build.reports.findbugs}/xml"/>
	<property name="build.reports.findbugs.html" value="${build.reports.findbugs}/html"/>
	<property name="build.reports.cpd" value="cpd"/>
	<property name="build.reports.cpd.xml" value="${build.reports.cpd}/xml"/>
	<property name="build.reports.cpd.html" value="${build.reports.cpd}/html"/>
	<property name="build.reports.pmd" value="pmd"/>
	<property name="build.reports.pmd.xml" value="${build.reports.pmd}/xml"/>
	<property name="build.reports.pmd.html" value="${build.reports.pmd}/html"/>

	<!-- Dependencies -->
	<property name="build-tools.home" value="${basedir}/../build-tools"/>
	<property name="unit-testing.home" value="${build-tools.home}/unit-testing"/>
	<property name="maverick-util.home" value="../maverick-util"/>
	<property name="maverick-util.classes" value="${maverick-util.home}/build/classes"/>
	<property name="maverick-crypto.home" value="../maverick-crypto"/>
	<property name="maverick-crypto.classes" value="${maverick-crypto.home}/build/classes"/>
	<property name="maverick-ssl.home" value="../maverick-ssl"/>
	<property name="maverick-ssl.classes" value="${maverick-ssl.home}/build/classes"/>
	<property name="maverick-multiplex.home" value="../maverick-multiplex"/>
	<property name="maverick-multiplex.classes" value="${maverick-multiplex.home}/build/classes"/>

	<!-- emma code coverage task definition -->
	<taskdef name="emma" classname="com.vladium.emma.emmaTask">
		<classpath location="${unit-testing.home}/emma/emma.jar"/>
		<classpath location="${unit-testing.home}/emma/emma_ant.jar"/>
	</taskdef>

	<!-- Copy and paste detector task definition -->
	<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask">
		<classpath location="${unit-testing.home}/pmd/pmd-4.0rc1.jar"/>
	</taskdef>

	<!-- FindBugs code quality task definition -->
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath location="${unit-testing.home}/findbugs/findbugs-ant.jar"/>
	</taskdef>

	<!-- PMD code quaility task definition -->
	<taskdef name="pmd" classname="net.sourceforge.pmd.ant.PMDTask">
		<classpath location="${unit-testing.home}/pmd/pmd-4.0rc1.jar"/>
	</taskdef>

	<!-- NOTE These should not be here, they place a ciruclar dependency on the following community extensions. -->

	<property name="sslexplorer-commons-vfs.home" value="../sslexplorer-commons-vfs"/>
	<property name="sslexplorer-commons-vfs.classes" value="../sslexplorer-commons-vfs/build/classes"/>
	<property name="sslexplorer-community-tunnels.home" value="../sslexplorer-community-tunnels"/>
	<property name="sslexplorer-community-applications.home" value="../sslexplorer-community-applications"/>
	<property name="sslexplorer-community-web-forwards.home" value="../sslexplorer-community-web-forwards"/>
	<property name="sslexplorer-community-network-places.home" value="../sslexplorer-community-network-places"/>
	<property name="sslexplorer-community-unix.home" value="../sslexplorer-community-unix"/>
	<property name="sslexplorer-community-activedirectory.home" value="../sslexplorer-community-activedirectory"/>

	<property name="agent.home" value="../sslexplorer-agent"/>

	<!-- Classpath -->
	<path id="jsp.precompile.path">
		<pathelement location="${build.boot.output}"/>
		<pathelement location="${build.server.output}"/>
		<pathelement location="${build.webapp.output}"/>
		<pathelement path="${maverick-ssl.classes}"/>
		<pathelement path="${maverick-crypto.classes}"/>
		<pathelement path="${maverick-util.classes}"/>
		<pathelement path="${maverick-multiplex.classes}"/>
		<fileset dir="${build.webapp.lib}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${build-tools.home}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${build.lib}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${build.serverlib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<path id="build.classpath">
		<pathelement path="${build.boot.output}"/>
		<pathelement path="${build.server.output}"/>
		<pathelement path="${build.lib}"/>
		<pathelement path="${build.serverlib}"/>
		<pathelement path="${build.webapp.output}"/>
		<pathelement path="${maverick-ssl.classes}"/>
		<pathelement path="${maverick-multiplex.classes}"/>
		<pathelement path="${maverick-crypto.classes}"/>
		<pathelement path="${maverick-util.classes}"/>

		<fileset dir="${build.lib}" includes="*.jar"/>
		<fileset dir="${build.serverlib}" includes="**/*.jar"/>
		<fileset dir="${build.webapp.lib}" includes="**/*.jar"/>
		<pathelement path="webapp"/>
	</path>

	<path id="test.classpath">
		<path refid="build.classpath"/>
		<fileset dir="${build-tools.home}" includes="**/*.jar"/>
	</path>

	<target name="test" description="Run the various tests for this extension" depends="clean">
		<mkdir dir="${build.reports}"/>
		<antcall target="test-junit"/>
		<antcall target="test-findbugs"/>
		<antcall target="test-cpd"/>
		<antcall target="test-pmd"/>
		<antcall target="test-report"/>
		<fail if="junit.test.failure" unless="run.all.tests" message="One or more JUnit tests failed, please consult the report for more information"/>
	</target>

	<target name="test-junit" description="Run the JUnit tests for this extension" depends="compile-test">
		<mkdir dir="${build.reports}/${build.reports.junit.xml}"/>

		<junit fork="yes" printsummary="yes" failureproperty="junit.test.failure" dir=".">
			<classpath>
				<pathelement path="${build.output.test}"/>
				<pathelement path="${build.output.instrumented}"/>
			</classpath>
			<classpath refid="test.classpath"/>

			<jvmarg value="-Demma.coverage.out.file=${build.reports}/${build.reports.emma.coverage}/${ant.project.name}-coverage.emma"/>
			<jvmarg value="-Demma.coverage.out.merge=true"/>

			<formatter type="xml"/>
			<batchtest todir="${build.reports}/${build.reports.junit.xml}">
				<fileset dir="${build.output.test}">
					<include name="**/*Test*.class"/>
					<exclude name="**/*Abstract*.class"/>
					<exclude name="**/*$*.class"/>
					<exclude name="com/sslexplorer/httpunit/*"/>
					<exclude name="com/sslexplorer/testcontainer/*"/>
				</fileset>
			</batchtest>
		</junit>
	</target>

	<target name="compile-test" description="Compile the tests" depends="compile,compile-test-dependencies">
		<antcall target="compile">
			<param name="build.debug" value="on"/>
		</antcall>
		<antcall target="compile-emma"/>

		<mkdir dir="${build.output.test}"/>
		<javac destdir="${build.output.test}" srcdir="${build.test.src}" debug="true" includeantruntime="false" includes="**/*.java">
			<classpath refid="test.classpath"/>
		</javac>
		<copy todir="${build.output.test}">
			<fileset dir="${build.test.src}">
				<include name="**/*.properties"/>
				<include name="**/*.txt"/>
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>

	<target name="compile-test-dependencies" description="Compile the test dependencies for this project">
		<ant inheritall="false" dir="${maverick-crypto.home}" target="compile"/>
		<ant inheritall="false" dir="${maverick-multiplex.home}" target="compile"/>
		<ant inheritall="false" dir="${maverick-ssl.home}" target="compile"/>
		<ant inheritall="false" dir="${maverick-util.home}" target="compile"/>
	</target>

	<target name="compile-emma" description="Instrument the classes to provide emma code coverage">
		<mkdir dir="${build.output.instrumented}"/>
		<mkdir dir="${build.reports}/${build.reports.emma.coverage}"/>
		<!-- shouldn't have to do this, but it it doesn't seem to work with multiple instrpaths set -->
		<emma>
			<instr instrpath="${build.boot.output}"
                mode="copy"
                outdir="${build.output.instrumented}"
                metadatafile="${build.reports}/${build.reports.emma.coverage}/${ant.project.name}-metadata.emma"
                merge="true">
			</instr>
		</emma>
		<emma>
			<instr instrpath="${build.server.output}"
                mode="copy"
                outdir="${build.output.instrumented}"
                metadatafile="${build.reports}/${build.reports.emma.coverage}/${ant.project.name}-metadata.emma"
                merge="true">
			</instr>
		</emma>
		<emma>
			<instr instrpath="${build.webapp.output}"
                mode="copy"
                outdir="${build.output.instrumented}"
                metadatafile="${build.reports}/${build.reports.emma.coverage}/${ant.project.name}-metadata.emma"
                merge="true">
			</instr>
		</emma>
	</target>

	<target name="test-emma" description="Test the code coverage against the JUnit tests" depends="test-junit" />

	<target name="test-findbugs" description="Test the extension against FindBugs">
		<mkdir dir="${build.reports}/${build.reports.findbugs.xml}"/>

		<findbugs projectname="${ant.project.name}" 
				  home="${unit-testing.home}/findbugs"
	              output="xml:withMessages"
	              outputFile="${build.reports}/${build.reports.findbugs.xml}/${ant.project.name}-findbugs-report.xml" 
				  reportLevel="low"
				  jvmargs="-Xms128m -Xmx512m -XX:+UseParallelGC">
			<sourcePath path="${build.boot.src}"/>
			<sourcePath path="${build.server.src}"/>
			<sourcePath path="${build.webapp.src}"/>
			<class location="${build.boot.output}"/>
			<class location="${build.server.output}"/>
			<class location="${build.webapp.output}"/>
			<auxclasspath refid="test.classpath"/>
		</findbugs>
	</target>

	<target name="test-cpd" description="Test the extension against the Copy and Paste Detector">
		<mkdir dir="${build.reports}/${build.reports.cpd.xml}"/>

		<cpd minimumTokenCount="50" outputFile="${build.reports}/${build.reports.cpd.xml}/${ant.project.name}-cpd-report.txt">
			<fileset dir="${build.webapp.src}" includes="**/*.java"/>
		</cpd>
	</target>

	<target name="test-pmd" description="Test the extension against the PMD rules">
		<mkdir dir="${build.reports}/${build.reports.pmd.xml}"/>

		<pmd shortFilenames="true" targetjdk="1.5" rulesetfiles="${unit-testing.home}/pmd/pmd-report-all.xml">
			<fileset dir="${build.webapp.src}" includes="**/*.java"/>
			<formatter type="xml" toFile="${build.reports}/${build.reports.pmd.xml}/${ant.project.name}-pmd-report.xml"/>
		</pmd>
	</target>

	<target name="test-report" description="Generate the HTML reports">
		<antcall target="test-junit-report"/>
		<antcall target="test-emma-report"/>
		<antcall target="test-findbugs-report"/>
		<!-- antcall target="test-cpd-report"/ -->
		<antcall target="test-pmd-report"/>
		<antcall target="test-report-cleanup"/>
	</target>

	<target name="test-junit-report" description="Generate the JUnit HTML report" unless="run.all.tests">
		<mkdir dir="${build.reports}/${build.reports.junit.html}"/>
		<junitreport todir="${build.reports}/${build.reports.junit}">
			<fileset dir="${build.reports}/${build.reports.junit.xml}" includes="TEST-*.xml"/>
			<report format="frames" todir="${build.reports}/${build.reports.junit.html}"/>
		</junitreport>
	</target>

	<target name="test-emma-report" description="Creates a code coverage report using emma stats gathered whilst running junit tests" unless="run.all.tests">
		<mkdir dir="${build.reports}/${build.reports.emma.html}"/>
		<emma>
			<report sourcepath="${build.webapp.src}" sort="+block,+name,+method,+class" metrics="method:70,block:80,line:80,class:100">
				<fileset dir="${build.reports}/${build.reports.emma.coverage}" includes="${ant.project.name}-*.emma"/>
				<html outfile="${build.reports}/${build.reports.emma.html}/${ant.project.name}-coverage.html" depth="method" columns="name,class,method,block,line"/>
			</report>
		</emma>
	</target>

	<target name="test-findbugs-report" description="Generate the FindBugs HTML report">
		<mkdir dir="${build.reports}/${build.reports.findbugs.html}"/>
		<xslt in="${build.reports}/${build.reports.findbugs.xml}/${ant.project.name}-findbugs-report.xml" style="${unit-testing.home}/findbugs/fancy.xsl" out="${build.reports}/${build.reports.findbugs.html}/${ant.project.name}-findbugs-report.html"/>
	</target>

	<target name="test-cpd-report" description="Generate the Copy and Paste detector HTML report">
		<mkdir dir="${build.reports}/${build.reports.cpd.html}"/>
		<xslt in="${build.reports}/${build.reports.cpd.xml}/${ant.project.name}-cpd-report.txt" style="${unit-testing.home}/pmd/cpdhtml.xslt" out="${build.reports}/${build.reports.cpd.html}/${ant.project.name}-cpd-report.html"/>
	</target>

	<target name="test-pmd-report" description="Generate the PMD HTML report">
		<mkdir dir="${build.reports}/${build.reports.pmd.html}"/>
		<xslt in="${build.reports}/${build.reports.pmd.xml}/${ant.project.name}-pmd-report.xml" style="${unit-testing.home}/pmd/wz-pmd-report.xslt" out="${build.reports}/${build.reports.pmd.html}/${ant.project.name}-pmd-report.html"/>
	</target>

	<target name="test-report-cleanup" description="Removes all the generated report meta-data, leaving behind the useful reports" unless="run.all.tests">
		<delete dir="${build.reports}/${build.reports.junit}" includes="*.*"/>
		<delete dir="${build.reports}/${build.reports.junit.xml}"/>
		<delete dir="${build.reports}/${build.reports.emma.coverage}"/>
		<delete dir="${build.reports}/${build.reports.findbugs.xml}"/>
		<delete dir="${build.reports}/${build.reports.pmd.xml}"/>

		<copy todir="${build.reports}/${build.reports.junit}">
			<fileset dir="${build.reports}/${build.reports.junit.html}" includes="**/*"/>
		</copy>
		<copy todir="${build.reports}/${build.reports.emma}">
			<fileset dir="${build.reports}/${build.reports.emma.html}" includes="**/*"/>
		</copy>
		<copy todir="${build.reports}/${build.reports.findbugs}">
			<fileset dir="${build.reports}/${build.reports.findbugs.html}" includes="**/*"/>
		</copy>
		<copy todir="${build.reports}/${build.reports.pmd}">
			<fileset dir="${build.reports}/${build.reports.pmd.html}" includes="**/*"/>
		</copy>

		<delete dir="${build.reports}/${build.reports.junit.html}"/>
		<delete dir="${build.reports}/${build.reports.emma.html}"/>
		<delete dir="${build.reports}/${build.reports.findbugs.html}"/>
		<delete dir="${build.reports}/${build.reports.pmd.html}"/>
	</target>

	<target name="clean-reports" unless="run.all.tests">
		<delete dir="${build.reports}"/>
	</target>

	<!-- Ant Contrib is required -->
	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${build-tools.home}/ant/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- Run the default SSL-Explorer server in the foreground -->
	<target name="run">
		<echo>*WARNING* The 'run' target is deprecated. Use 'console', 'start' and 'stop'</echo>
		<antcall target="console"/>
	</target>

	<!-- Run the default SSL-Explorer server in the foreground -->
	<target name="console" depends="compile,local-deploy,deploy-community-extensions">
		<!-- Launch on Linux -->
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<chmod perm="a+x" type="file" file="install/platforms/linux/sslexplorer"/>
				<chmod perm="a+x" type="file" file="install/platforms/linux/wrapper"/>
				<exec executable="${basedir}/install/platforms/linux/sslexplorer">
					<arg value="console"/>
					<env key="WRAPPER_CONF" value="${sslexplorer.conf}/wrapper.conf"/>
				</exec>
			</then>
			<else>
				<!-- Launch on Windows -->
				<if>
					<os family="windows"/>
					<then>
						<exec executable="${basedir}/install/platforms/windows/wrapper">
							<arg value="-c"/>
							<arg value="../../../${sslexplorer.conf}/wrapper.conf"/>
							<arg value="wrapper.working.dir=../../.."/>
							<arg value="wrapper.java.library.path.1=install/platforms/windows"/>
						</exec>
					</then>
					<else>
						<!-- Fall back to manually executing -->
						<echo>
							Service wrapper not currently supported on this platform (${os.name}), so falling back to 
							generic method. You will not have restart ability from the user interface and
							beware of using CTRL+C, it may leave processes running
						</echo>
						<antcall target="console-using-java"/>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Launch using Java (avoids wrapper) -->

	<target name="console-using-java">
		<java fork="true" classname="com.sslexplorer.boot.Bootstrap">
			<classpath>
				<pathelement path="${build.boot.output}"/>
			</classpath>
			<arg value="--conf=${sslexplorer.conf}"/>
		</java>
	</target>

	<!-- Start the default SSL-Explorer server in the background -->
	<target name="start" depends="compile,local-deploy,deploy-community-extensions">
		<!-- Launch on Linux -->
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<chmod perm="a+x" type="file" file="install/platforms/linux/sslexplorer"/>
				<chmod perm="a+x" type="file" file="install/platforms/linux/wrapper"/>
				<exec executable="${basedir}/install/platforms/linux/sslexplorer">
					<arg value="start"/>
					<env key="WRAPPER_CONF" value="${sslexplorer.conf}/wrapper.conf"/>
				</exec>
				<echo>SSL-Explorer started</echo>
			</then>
			<else>
				<!-- Launch on Windows -->
				<if>
					<os family="windows"/>
					<then>
						<exec spawn="true" executable="${basedir}/install/platforms/windows/wrapper">
							<arg value="-c"/>
							<arg value="../../../${sslexplorer.conf}/wrapper.conf"/>
							<arg value="wrapper.working.dir=../../.."/>
							<arg value="wrapper.java.library.path.1=install/platforms/windows"/>
						</exec>
						<echo>SSL-Explorer started</echo>
					</then>
					<else>
						<!-- Fall back to manually executing -->
						<echo>
							Service wrapper not currently supported on this platform (${os.name}), so falling back to 
							generic method. You will not have restart ability from the user interface and
							beware of using CTRL+C, it may leave processes running
						</echo>
						<java spawn="true" fork="true" classname="com.sslexplorer.boot.Bootstrap">
							<classpath>
								<pathelement path="${build.boot.output}"/>
							</classpath>
							<arg value="--conf=${sslexplorer.conf}"/>
						</java>
						<echo>SSL-Explorer started</echo>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Stop tun running SSL-Explorer server -->
	<target name="stop">
		<!-- Stop on Linux -->
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<chmod perm="a+x" type="file" file="install/platforms/linux/sslexplorer"/>
				<chmod perm="a+x" type="file" file="install/platforms/linux/wrapper"/>
				<exec executable="${basedir}/install/platforms/linux/sslexplorer">
					<arg value="stop"/>
					<env key="WRAPPER_CONF" value="${sslexplorer.conf}/wrapper.conf"/>
				</exec>
			</then>
			<else>
				<antcall target="stop-using-signal"/>
			</else>
		</if>
	</target>

	<!-- Stop the running SSL-Explorer using signal via run file -->
	<target name="stop-using-signal">
		<echo file="tmp/server.run">shutdown</echo>
		<echo>Shutdown signal sent. This may take a few seconds to take effect.</echo>
	</target>

	<!-- Restart the running SSL-Explorer server -->
	<target name="restart" depends="compile,local-deploy,deploy-community-extensions">
		<!-- Restart on Linux -->
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<chmod perm="a+x" type="file" file="install/platforms/linux/sslexplorer"/>
				<chmod perm="a+x" type="file" file="install/platforms/linux/wrapper"/>
				<exec executable="${basedir}/install/platforms/linux/sslexplorer">
					<arg value="restart"/>
					<env key="WRAPPER_CONF" value="${sslexplorer.conf}/wrapper.conf"/>
				</exec>
			</then>
			<else>
				<if>
					<os family="windows"/>
					<then>
						<echo file="tmp/server.run">restart</echo>
						<echo>Restart signal sent. This may take a few seconds to take effect.</echo>
					</then>
					<else>
						<!-- Fall back to manually executing -->
						<echo>Restart not implemented on this platform</echo>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Start the install wizard  -->
	<target name="install" depends="compile,local-deploy,deploy-community-extensions">

		<!-- Just in case -->
		<mkdir dir="logs"/>
		<mkdir dir="tmp"/>

		<java fork="true" classname="com.sslexplorer.boot.Bootstrap">
			<arg value="--install"/>
			<classpath>
				<pathelement path="${build.boot.output}"/>
			</classpath>
			<arg value="--conf=${sslexplorer.conf}"/>
		</java>
	</target>

	<!-- Install SSL-Explorer as a service  -->
	<target name="install-service" depends="compile,local-deploy,deploy-community-extensions">
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<!-- Install on Linux -->
				<echo>Installing SSL-Explorer as Linux service</echo>
				<chmod perm="a+x" type="file" file="install/platforms/linux/install-service"/>
				<exec executable="${basedir}/install/platforms/linux/install-service">
					<arg value="-j"/>
					<arg value="${java.home}"/>
				</exec>
				<echo>SSL-Explorer installed as Linux service</echo>
			</then>
			<else>
				<!-- Install on Windows -->
				<if>
					<os family="windows"/>
					<then>
						<!-- Install on Linux -->
						<echo>Installing SSL-Explorer as Windows service</echo>
						<exec spawn="true" executable="${basedir}/install/platforms/windows/wrapper">
							<arg value="-i"/>
							<arg value="../../../${sslexplorer.conf}/wrapper.conf"/>
							<arg value="wrapper.working.dir=../../.."/>
							<arg value="wrapper.java.library.path.1=install/platforms/windows"/>
						</exec>
						<echo>SSL-Explorer installed as Windows service</echo>
					</then>
					<else>
						<!-- Fall back to manually executing -->
						<echo level="error">
							Service wrapper not currently supported on this platform (${os.name}), service cannot be installed.
						</echo>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Uninstall SSL-Explorer as a services  -->
	<target name="uninstall-service" depends="compile,local-deploy,deploy-community-extensions">
		<if>
			<equals arg1="${os.name}" arg2="Linux"/>
			<then>
				<!-- Install on Linux -->
				<echo>Uninstalling SSL-Explorer Linux service</echo>
				<chmod perm="a+x" type="file" file="install/platforms/linux/install-service"/>
				<exec executable="${basedir}/install/platforms/linux/install-service">
					<arg value="-u"/>
				</exec>
				<echo>Uinstalled SSL-Explorer Linux service</echo>
			</then>
			<else>
				<!-- Install on Windows -->
				<if>
					<os family="windows"/>
					<then>
						<!-- Install on Linux -->
						<echo>Uinstallign SSL-Explorer Windows service</echo>
						<exec spawn="true" executable="${basedir}/install/platforms/windows/wrapper">
							<arg value="-r"/>
							<arg value="../../../${sslexplorer.conf}/wrapper.conf"/>
							<arg value="wrapper.working.dir=../../.."/>
							<arg value="wrapper.java.library.path.1=install/platforms/windows"/>
						</exec>
						<echo>Uinstalled SSL-Explorer Windows server</echo>
					</then>
					<else>
						<!-- Fall back to manually executing -->
						<echo level="error">
							Service wrapper not currently supported on this platform (${os.name}), service cannot be uninstalled.
						</echo>
					</else>
				</if>
			</else>
		</if>
	</target>

	<!-- Run the upgrader utility -->
	<target name="upgrader" depends="compile-upgrader">
		<!-- Fall back to manually executing -->
		<input message="Enter the directory where the old SSL-Explorer 0.1.15+ installation is (or just hit ENTER to attempt to run GUI front end)" addproperty="upgrader.old">
		</input>
		<if>
			<equals arg1="${upgrader.old}" arg2=""/>
			<then>
				<java spawn="true" fork="true" classname="com.sslexplorer.upgrade.Upgrade">
					<classpath>
						<pathelement path="${build.tools.output}"/>
						<fileset dir="${build.lib}">
							<include name="commons-logging.jar"/>
						</fileset>
						<fileset dir="${build.webapp.lib}">
							<include name="hsqldb.jar"/>
						</fileset>
					</classpath>
				</java>
			</then>
			<else>
				<java logerror="true" classname="com.sslexplorer.upgrade.Upgrade">
					<arg value="${upgrader.old}"/>
					<arg value="${basedir}"/>
					<classpath>
						<pathelement path="${build.tools.output}"/>
						<fileset dir="${build.lib}">
							<include name="commons-logging.jar"/>
						</fileset>
						<fileset dir="${build.webapp.lib}">
							<include name="hsqldb.jar"/>
						</fileset>
					</classpath>
				</java>
			</else>
		</if>
	</target>

	<!-- Run the HSQLDB manager -->
	<target name="hsqldb-manager">
		<java logerror="true"  fork="true" classname="org.hsqldb.util.DatabaseManagerSwing">
			<classpath>
				<pathelement path="${build.boot.output}"/>
				<pathelement path="${build.server.output}"/>
				<pathelement path="${build.webapp.output}"/>
				<pathelement path="${maverick-crypto.classes}"/>
				<pathelement path="${maverick-ssl.classes}"/>
				<pathelement location="${tools.jar}"/>
				<fileset dir="${build.lib}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${build.webapp.lib}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- Run the HSQLDB dump -->
	<target name="hsqldb-dump">
		<java fork="true" classname="org.hsqldb.util.Transfer">
			<arg value="--dump"/>
			<classpath>
				<pathelement path="${build.boot.output}"/>
				<pathelement path="${build.server.output}"/>
				<pathelement path="${build.webapp.output}"/>
				<pathelement path="${maverick-crypto.classes}"/>
				<pathelement path="${maverick-ssl.classes}"/>
				<pathelement location="${tools.jar}"/>
				<fileset dir="${build.lib}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${build.webapp.lib}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</java>
	</target>

	<!-- Compile everything, build and deploy community plugins -->

	<target name="deploy-community-extensions" depends="compile">

		<!-- Run the release targets on all of the community plugins and copy the extensions
		     to the repository -->

		<ant inheritall="false" dir="${sslexplorer-community-tunnels.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-tunnels.home}/build/release/sslexplorer-community-tunnels.zip"
			todir="${sslexplorer.conf}/repository/archives"/>

		<ant inheritall="false" dir="${sslexplorer-community-applications.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-applications.home}/build/release/sslexplorer-community-applications.zip"
			todir="${sslexplorer.conf}/repository/archives"/>

		<ant inheritall="false" dir="${sslexplorer-community-web-forwards.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-web-forwards.home}/build/release/sslexplorer-community-web-forwards.zip"
			todir="${sslexplorer.conf}/repository/archives"/>

		<ant inheritall="false" dir="${sslexplorer-community-network-places.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-network-places.home}/build/release/sslexplorer-community-network-places.zip"
			todir="${sslexplorer.conf}/repository/archives"/>

		<ant inheritall="false" dir="${sslexplorer-community-unix.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-unix.home}/build/release/sslexplorer-community-unix.zip"
			todir="${sslexplorer.conf}/repository/archives"/>

		<ant inheritall="false" dir="${sslexplorer-community-activedirectory.home}" target="release">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<copy file="${sslexplorer-community-activedirectory.home}/build/release/sslexplorer-community-activedirectory.zip"
			todir="${sslexplorer.conf}/repository/archives"/>
	</target>

	<!-- Compile everything -->
	<target name="compile" depends="compile-dependencies,compile-boot,compile-server,compile-webapp">
	</target>

	<!-- Compile server dependencies -->

	<target name="compile-dependencies">
		<ant inheritall="false" dir="${maverick-util.home}" target="compile">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<ant inheritall="false" dir="${maverick-crypto.home}" target="compile">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<ant inheritall="false" dir="${maverick-ssl.home}" target="compile">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<ant inheritall="false" dir="${maverick-multiplex.home}" target="compile">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>
		<ant inheritall="false" dir="${sslexplorer-commons-vfs.home}" target="compile">
			<property name="build.compiler" value="${build.compiler}"/>
		</ant>

	</target>

	<!-- Compile the boot classes  -->

	<target name="compile-boot">
		<mkdir dir="${build.boot.output}"/>
		<javac compiler="${build.compiler}" destdir="${build.boot.output}"
				srcdir="${build.boot.src}"
				includeantruntime="false" 
			    includes="**/*.java"
			    debug="${build.debug}">
			<classpath>
				<pathelement path="${maverick-crypto.classes}"/>
				<pathelement path="${maverick-ssl.classes}"/>
				<fileset dir="${build.lib}">
					<include name="commons-logging.jar"/>
					<include name="javax.servlet.jar"/>
					<include name="jdom.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.boot.output}">
			<fileset dir="${build.boot.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
			<fileset dir="${build.boot.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- Compile the upgrader utility  -->

	<target name="compile-upgrader">
		<mkdir dir="${build.tools.output}"/>
		<javac compiler="${build.compiler}" destdir="${build.tools.output}"
				srcdir="${build.tools.home}/upgrader/src"
				includeantruntime="false" 
			    includes="**/*.java"
			    debug="${build.debug}">
			<classpath>
				<fileset dir="${build.lib}">
					<include name="commons-logging.jar"/>
				</fileset>
				<fileset dir="${build.webapp.lib}">
					<include name="hsqldb.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.tools.output}">
			<fileset dir="${build.tools.home}/upgrader/src">
				<include name="**/*.png"/>
			</fileset>
		</copy>
	</target>

	<!-- Compile the server classes  -->

	<target name="compile-server">
		<mkdir dir="${build.server.output}"/>
		<javac compiler="${build.compiler}" destdir="${build.server.output}"
				srcdir="${build.server.src}"
				includeantruntime="false" 
			    debug="${build.debug}"
			    includes="**/*.java">
			<classpath>
				<pathelement path="${build.boot.output}"/>
				<fileset dir="${build.serverlib}">
					<include name="org.mortbay.jetty.jar"/>
					<include name="wrapper.jar"/>
				</fileset>
				<fileset dir="${build.lib}">
					<include name="javax.servlet.jar"/>
					<include name="commons-logging.jar"/>
					<include name="jdom.jar"/>
					<include name="ant.jar"/>
					<include name="ant-nodeps.jar"/>
					<include name="jasper-compiler.jar"/>
					<include name="jasper-runtime.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.server.output}">
			<fileset dir="${build.server.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
			</fileset>
		</copy>
	</target>

	<!-- Compile the webapp classes  -->

	<target name="compile-webapp">
		<mkdir dir="${build.webapp.output}"/>
		<javac compiler="${build.compiler}" destdir="${build.webapp.output}"
				srcdir="${build.webapp.src}"
				includeantruntime="false" 
			    debug="${build.debug}"
			    includes="**/*.java">
			<classpath>
				<pathelement path="${build.boot.output}"/>
				<pathelement path="${maverick-crypto.classes}"/>
				<pathelement path="${maverick-ssl.classes}"/>
				<pathelement path="${maverick-multiplex.classes}"/>
				<pathelement path="${maverick-util.classes}"/>
				<pathelement path="${sslexplorer-commons-vfs.classes}"/>
				<fileset dir="${build.webapp.lib}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${build.lib}">
					<include name="*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<copy todir="${build.webapp.output}">
			<fileset dir="${build.webapp.src}">
				<include name="**/*.xml"/>
				<include name="**/*.properties"/>
				<include name="**/*.types"/>
				<include name="**/*.props"/>
			</fileset>
		</copy>
	</target>

	<!-- Precompile JSPs -->

	<target name="precompile-jsp">
		<mkdir dir="${build.jsp.classes.output}"/>
		<mkdir dir="${build.jsp.mappings.output}"/>
		<mkdir dir="${build.jsp.output}"/>
		<echo message="Precompiling JSP to Java code..."/>
		<java fork="true" classname="org.apache.jasper.JspC" classpathref="jsp.precompile.path">
			<arg value="-die"/>
			<arg value="-d"/>
			<arg value="${build.jsp.output}" />
			<arg value="-p"/>
			<arg value="org.apache.jsp"/>
			<arg value="-webinc"/>
			<arg value="${build.jsp.mappings.file}"/>
			<arg value="-webapp"/>
			<arg value="${basedir}/webapp"/>
			<arg value="-uriroot"/>
			<arg value="${basedir}/webapp"/>
		</java>
		<echo message="Compiling translated JSP code..."/>
		<javac srcdir="${build.jsp.output}"
					destdir="${build.jsp.classes.output}"
					classpathref="jsp.precompile.path"
					debug="${build.debug}"/>
		<loadfile property="jsp.servlets.text" srcFile="${build.jsp.mappings.file}"/>
		<echo file="webapp/WEB-INF/jsp-mappings.xml">
			<![CDATA[<?xml version="1.0" encoding="ISO-8859-1"?>

			<!DOCTYPE jsp-mappings
	  PUBLIC "-//3SP//JSP Mappings//EN"
	  "webapp/WEB-INF/jsp-mappings.dtd">
			<jsp-mappings>
${jsp.servlets.text}
</jsp-mappings>			
]]></echo>
	</target>

	<!-- Build an install the agent. Note for this to work you must
	     have performed some configuration. See the documentation for
	     details -->

	<target name="install-agent">
		<ant inheritall="false" dir="${agent.home}" target="release" />
		<copy file="${agent.home}/build/release/sslexplorer-agent.zip"
			todir="${sslexplorer.conf}/repository/archives"/>
	</target>

	<!-- Copy the generated webapp files to the local webapp/WEB-INF/classes
	     directory so it is picked up by jetty when running -->
	<target name="local-deploy">
		<mkdir dir="${build.webapp.deploy}" />
		<copy todir="${build.webapp.deploy}">
			<fileset dir="${build.webapp.output}">
				<include name="**/*" />
			</fileset>
		</copy>
	</target>

	<!-- Clean up all built files -->

	<target name="clean">
		<delete dir="${build.dir}" includes="*.*" failonerror="false"/>
		<delete dir="${build.boot.output}" />
		<delete dir="${build.server.output}" />
		<delete dir="${build.webapp.output}" />
		<delete dir="${build.webapp.deploy}" />
		<delete dir="${build.test.output}" />
		<delete dir="${build.jsp.output}" />
		<delete dir="${build.jsp.classes.output}" />
		<delete dir="${build.jsp.mappings.output}" />
		<delete dir="${build.doc}" />

		<delete dir="${build.output.test}"/>
		<delete dir="${build.output.instrumented}"/>
		<antcall target="clean-reports"/>
	</target>

	<!-- Create API documentation -->

	<target name="javadoc">
		<mkdir dir="${build.doc}/api" />
		<javadoc sourcepath="src" defaultexcludes="yes" destdir="${build.doc}/api" author="true" version="true" use="true" windowtitle="SSL-Explorer" notree="true">
			<doctitle>
				<![CDATA[<h1>SSL-Explorer</h1>
			<br>
				<p>The SSL-Explorer gateway.</p>]]></doctitle>
			<bottom>
				<![CDATA[<i>Copyright &#169; 2003-2006 3SP LTD. All Rights Reserved.</i>]]></bottom>
			<packageset dir="src" defaultexcludes="yes">
				<include name="com/sslexplorer/**" />
			</packageset>
			<classpath>
				<pathelement path="${build.boot.output}" />
				<pathelement path="${maverick-crypto.classes}" />
				<pathelement path="${maverick-ssl.classes}" />
				<pathelement path="${maverick-multiplex.classes}" />
				<fileset dir="${build.webapp.lib}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${build.lib}">
					<include name="*.jar" />
				</fileset>
				<fileset dir="${build.serverlib}">
					<include name="*.jar" />
				</fileset>
			</classpath>
		</javadoc>
	</target>
	
</project>